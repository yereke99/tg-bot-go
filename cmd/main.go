package main

import (
	"context"
	"fmt"
	"os"
	"os/signal"
	"tg-bot-go/config"
	"tg-bot-go/internal/handler"
	"tg-bot-go/internal/keyboard"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

func main() {
	ctx, cancel := signal.NotifyContext(context.Background(), os.Interrupt)
	defer cancel()

	cfg, err := config.NewConfig()
	if err != nil {
		fmt.Println(err)
		return
	}

	// Replace with your bot token
	token := cfg.Token

	opts := []bot.Option{
		bot.WithCallbackQueryDataHandler("chat", bot.MatchTypePrefix, chatButtonHandler),
		bot.WithCallbackQueryDataHandler("select_", bot.MatchTypePrefix, inlineHandler),
		bot.WithCallbackQueryDataHandler("exit", bot.MatchTypePrefix, callbackHandlerExit),
	}

	// Create bot
	b, err := bot.New(token, opts...)
	if err != nil {
		fmt.Println("Error creating bot:", err)
		return
	}

	chatState := handler.GetChatState()

	// 1) –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–µ—Ä–µ—Å—ã–ª–∫–∞ –º–µ–∂–¥—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏)
	b.RegisterHandler(
		bot.HandlerTypeMessageText,
		"",
		bot.MatchTypeContains, func(ctx context.Context, b *bot.Bot, update *models.Update) {
			handler.HandleChat(ctx, b, update, chatState)
		})

	b.RegisterHandler(bot.HandlerTypeMessageText, "/hello", bot.MatchTypeExact, helloHandler)

	// Create user state manager
	//userState := handler.NewUserState()

	// Register a single text message handler
	//b.RegisterHandler(bot.HandlerTypeMessageText, "", bot.MatchTypeContains, func(ctx context.Context, b *bot.Bot, update *models.Update) {
	//	handler.HandleUpdate(ctx, b, update, userState)
	//})

	fmt.Println("Bot is running...")
	b.Start(ctx)
}

func inlineHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	chatState := handler.GetChatState() // –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
	userID := update.CallbackQuery.From.ID

	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var selectedUserID int64
	fmt.Sscanf(update.CallbackQuery.Data, "select_%d", &selectedUserID)

	if chatState.CheckPartnerToEmpty(selectedUserID) {
		// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–Ω—è—Ç!
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: userID,
			Text:   fmt.Sprintf("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ: %d", selectedUserID),
		})
		return
	}
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤
	chatState.SetPartner(userID, selectedUserID)
	chatState.SetPartner(selectedUserID, userID)

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: userID,
		Text:   fmt.Sprintf("–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É —Å ID: %d", selectedUserID),
	})
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: selectedUserID,
		Text:   fmt.Sprintf("–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É —Å ID: %d", userID),
	})
}

func helloHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	kb := keyboard.NewKeyboard()
	kb.AddRow(keyboard.NewInlineButton("üí¨ Chat", "chat"))

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      update.Message.Chat.ID,
		Text:        "Hello, *" + bot.EscapeMarkdown(update.Message.From.FirstName) + " please click button üí¨ Chat to join room*",
		ParseMode:   models.ParseModeMarkdown,
		ReplyMarkup: kb.Build(),
	})
	if err != nil {
		fmt.Println("Error sending message:", err)
	}
}

func callbackHandlerExit(ctx context.Context, b *bot.Bot, update *models.Update) {
	chatState := handler.GetChatState()

	userID := update.CallbackQuery.From.ID
	partnerID := chatState.GetUserPartner(userID)

	kb := keyboard.NewKeyboard()
	kb.AddRow(keyboard.NewInlineButton("üí¨ Chat", "chat"))

	chatState.RemoveUser(userID)
	if partnerID != 0 {
		chatState.RemoveUser(partnerID)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:      partnerID,
			Text:        "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.",
			ReplyMarkup: kb.Build(),
		})
	}

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      update.CallbackQuery.From.ID,
		Text:        "–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞.",
		ReplyMarkup: nil,
	})
}

func chatButtonHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	chatState := handler.GetChatState() // –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
	userID := update.CallbackQuery.From.ID

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
	chatState.AddUser(userID)

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤–∏–¥–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
	users := chatState.GetUsers()
	kb := keyboard.NewKeyboard()
	for _, u := range users {
		if u != userID { // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			kb.AddRow(keyboard.NewInlineButton(fmt.Sprintf("User %d", u), fmt.Sprintf("select_%d", u)))
		}
	}

	// –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫
	if len(users) == 1 {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.CallbackQuery.From.ID,
			Text:   "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...",
		})
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      update.CallbackQuery.From.ID,
		Text:        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
		ReplyMarkup: kb.Build(),
	})
}
